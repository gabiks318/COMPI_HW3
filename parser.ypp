%{
    #include <stdio.h>
    #include "hw3_output.hpp"
    #include "types.h"
    #include "symbol_table.h"

    extern int yylineno;
    extern int yylex();
    extern TableStack tables;
    int yyerror(const char* message);

    using namespace output;
%}

    %token VOID INT BYTE B BOOL CONST TRUE FALSE IF RETURN WHILE BREAK CONTINUE SC COMMA COMMENT ID NUM STRING AUTO


    %right ASSIGN

    %left OR
    %left AND
    %left RELOP
    %left ADD_SUB
    %left MULT_DIV
	%right NOT
    %left LPAREN RPAREN LBRACE RBRACE
    %right ELSE



%%
Program: Funcs                                                      {$$ = new Program();}

Funcs: /*epsilon*/                                                  {}
       | FuncDecl Funcs                                             {}

FuncDecl: RetType ID LPAREN Formals RPAREN {$$ = new FuncDecl(dynamic_cast<RetType*>($1), $2, dynamic_cast<Formals*>($4));} LBRACE Statements RBRACE  ES {tables.pop_scope();}

RetType: Type                                                       {$$ = new RetType(dynamic_cast<Type*>($1)->type);}
         | VOID                                                     {$$ = new RetType("void");}

Formals: /*epsilon*/                                                {$$ = new Formals();}
         | FormalsList                                              {$$ = new Formals(dynamic_cast<FormalsList*>($1));}

FormalsList: FormalDecl                                             {$$ = new FormalsList($1);}
             | FormalDecl COMMA FormalsList                         {$$ = new FormalsList($1,dynamic_cast<FormalsList*>($3));}

FormalDecl:  Type ID                                                {$$ = new FormalDecl(dynamic_cast<Type*>($1), $2);}

Statements: Statement                                               {$$ = new Statements(dynamic_cast<Statement*>($1));}
            | Statements Statement                                  {$$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2));}

Statement: LBRACE OS Statements ES RBRACE                           {}
           | Type ID SC                                             {$$ = new Statement(dynamic_cast<Type*>($1), $2);}
           | Type ID ASSIGN Exp SC                                  {$$ = new Statement(dynamic_cast<Type*>($1), $2), dynamic_cast<Exp*>($3);}
           | AUTO ID ASSIGN Exp SC                                  {$$ = new Statement(nullptr, $2, dynamic_cast<Exp*>($3));}
           | ID ASSIGN Exp SC                                       {$$ = new Statement($1, dynamic_cast<Exp*>($3));}
           | Call SC                                                {$$ = new Statement(dynamic_cast<Call*>($1));}
           | RETURN SC                                              {$$ = new Statement(new Exp());}
           | RETURN Exp SC                                          {$$ = new Statement(dynamic_cast<Exp*>($3));}
           | IF LPAREN Exp RPAREN OS Statement ES                   {$$ = new Statement(dynamic_cast<Exp*>($3));}
           | IF LPAREN Exp RPAREN OS Statement ES OS ELSE ES Statement   {$$ = new Statement(dynamic_cast<Exp*>($3));}
           | WHILE LPAREN Exp RPAREN OLS Statement ES                {$$ = new Statement(dynamic_cast<Exp*>($3));}
           | BREAK SC                                               {$$ = new Statement($1);}
           | CONTINUE SC                                            {$$ = new Statement($1);}

Call: ID LPAREN ExpList RPAREN                                      {$$ = new Call($1, $3);}
      | ID LPAREN RPAREN                                            {$$ = new Call($1);}

ExpList: Exp                                                        {$$ = new ExpList($1);}
         | Exp COMMA ExpList                                        {$$ = new ExpList($2, $1);}

Type: INT                                                           {printProductionRule(31);}
      | BYTE                                                        {printProductionRule(32);}
      | BOOL                                                        {printProductionRule(33);}

Exp: LPAREN Exp RPAREN                                              {$$ = new Exp(dynamic_cast<Exp*>($2));}
     | Exp ADD_SUB Exp                                              {$$ = new Exp($1, $3, $2->value, "int");}
     | Exp MULT_DIV Exp                                             {$$ = new Exp($1, $3, $2->value, "int");}
     | ID                                                           {$$ = new Exp($1);}
     | Call                                                         {$$ = new Exp($1);}
     | NUM                                                          {$$ = new Exp($1, "int");}
     | NUM B                                                        {$$ = new Exp($1, "byte");}
     | STRING                                                       {$$ = new Exp($1, "string");}
     | TRUE                                                         {$$ = new Exp($1, "bool");}
     | FALSE                                                        {$$ = new Exp($1, "bool");}
     | NOT Exp                                                      {$$ = new Exp($2, $2, $1->value, "bool");}
     | Exp AND Exp                                                  {$$ = new Exp($1, $3, $2->value, "bool");}
     | Exp OR Exp                                                   {$$ = new Exp($1, $3, $2->value, "bool");}
     | Exp RELOP Exp                                                {$$ = new Exp($1, $3, $2->value, "relop");}
     | LPAREN Type RPAREN Exp                                       {$$ = new Exp($4, $2);}

OS:                                                                 {tables.push_scope();}
OLS:                                                                {tables.push_scope(true);}
ES:                                                                 {tables.pop_scope();}
%%

TableStack tables = TableStack();
int main(){
        return yyparse();
}

int yyerror(const char * message){
	errorSyn(yylineno);
	exit(0);
}